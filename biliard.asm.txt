.386
.model flat, stdcall
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;includem biblioteci, si declaram ce functii vrem sa importam
includelib msvcrt.lib
extern exit: proc
extern malloc: proc
extern memset: proc

includelib canvas.lib
extern BeginDrawing: proc
extern puts: proc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;declaram simbolul start ca public - de acolo incepe executia
public start
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;sectiunile programului, date, respectiv cod
.data
;aici declaram date
window_title DB "International Billiards",0
area_width EQU 1050
area_height EQU 900
area DD 0
;vertical DB "dddd", 0

counter DD 0 ; numara evenimentele de tip timer

arg1 EQU 8
arg2 EQU 12
arg3 EQU 16
arg4 EQU 20

symbol_width EQU 10
symbol_height EQU 20
symbol_width1 EQU 32
symbol_height1 EQU 32
include digits.inc
include letters.inc
include minge8.inc

button_x EQU  150
button_y EQU  200
table_size_v EQU 400   ;careu vertical
table_size_o EQU 706   ;careu orizontal
button_x1 EQU  75
button_y1 EQU  50

mingel EQU  15
coordXminge DD 800
coordYminge DD 400
coordXaj DD 400
coordYaj DD 400	



	
.code
; procedura make_text afiseaza o litera sau o cifra la coordonatele date
; arg1 - simbolul de afisat (litera sau cifra)
; arg2 - pointer la vectorul de pixeli
; arg3 - pos_x
; arg4 - pos_y

make_minge proc
	push ebp
	mov ebp, esp
	pusha
	
	
make_space:	
	mov eax, 0 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width1
	mul ebx
	mov ebx, symbol_height1
	mul ebx
	add esi, eax
	mov ecx, symbol_height1
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height1
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width1
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0fdee00h
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_minge endp

make_mingee macro  drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_minge
	add esp, 16
endm
 
make_text proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0ff4f00h
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text endp

make_text2 proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0ff8c00h
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text2 endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
make_text3 proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0fdee00h
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text3 endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
make_text4 proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0ccff00h
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text4 endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
make_text5 proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 087cefah
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text5 endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
make_text6 proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0000000h
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text6 endp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; un macro ca sa apelam mai usor desenarea simbolului
make_text_macro macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text
	add esp, 16
endm

make_text_macro2 macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text2
	add esp, 16
endm

make_text_macro3 macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text3
	add esp, 16
endm

make_text_macro4 macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text4
	add esp, 16
endm

make_text_macro5 macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text5
	add esp, 16
endm

make_text_macro6 macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text6
	add esp, 16
endm


dm_0 macro x, y
	cmp x, 844
	je stop0
	sub x, 1
	make_text_macro6 'O', area, x, y
	add x, 2
	make_text_macro 'O', area, x, y	
	add coordXminge, 1
endm

	jmp stop0 

dm_45 macro x, y
	sub x,  1
	sub y, -1
	make_text_macro6 'O', area, x, y
	
	add x,  2
	add y, -2
	make_text_macro 'O', area, x, y
	
	add coordXminge, 1
	add coordYminge, -1
endm 

dm_90 macro x, y
	
	sub y, -1
	make_text_macro6 'O', area, x, y
	add y, -2
	make_text_macro 'O', area, x, y	
	add coordYminge, -1
endm 

dm_135 macro x, y
	sub x, -1
	sub y, -1
	make_text_macro6 'O', area, x, y
	add x, -2
	add y, -2
	make_text_macro 'O', area, x, y	
	add coordXminge, -1
	add coordYminge, -1
endm 

dm_180 macro x, y
	sub x, -1
	make_text_macro6 'O', area, x, y
	add x, -2
	; add y, -5
	make_text_macro 'O', area, x, y	
	add coordXminge, -1
	; add coordYminge, -5
endm 

dm_225 macro x, y
	add x, +1
	add y, -1
	make_text_macro6 'O', area, x, y
	add x, -2
	add y, +2
	make_text_macro 'O', area, x, y	
	add coordXminge, -1
	add coordYminge, +1
endm 

dm_270 macro x, y
	sub y, +1
	make_text_macro6 'O', area, x, y
	; add x, -5
	add y, +2
	make_text_macro 'O', area, x, y	
	; add coordXminge, -5
	add coordYminge, +1
endm 

dm_315 macro x, y
	sub x, +1
	sub y, +1
	make_text_macro6 'O', area, x, y
	add x, +2
	add y, +2
	make_text_macro 'O', area, x, y	
	add coordXminge, +1
	add coordYminge, +1
endm 


stop0:
	add coordXminge, 10
	add coordYminge, 10 
	dm_180 coordXminge, coordYminge
	

; stop: aici pun eticheta de 180 de grade
	

line_horizontal macro x, y, len, color
local bucla_linie
	mov eax, y ;EAX=y
	mov ebx, area_width
	mul ebx ;EAX=y*area_width
	add eax,x 
	shl eax,2 ;pozitia in vectorul
	add eax, area
	mov ecx,len
bucla_linie:
	mov dword ptr[eax],color
	add eax, 4
	loop bucla_linie
endm

line_vertical macro x, y, len, color
local bucla_linie
	mov eax, y ;EAX=y
	mov ebx, area_width
	mul ebx ;EAX=y*area_width
	add eax,x 
	shl eax,2 ;pozitia in vectorul
	add eax, area
	mov ecx,len
bucla_linie :
	mov dword ptr[eax],color
	add eax, area_width*4
	loop bucla_linie
endm

; functia de desenare - se apeleaza la fiecare click
; sau la fiecare interval de 200ms in care nu s-a dat click
; arg1 - evt (0 - initializare, 1 - click, 2 - s-a scurs intervalul fara click, 3 - s-a apasat o tasta)
; arg2 - x (in cazul apasarii unei taste, x contine codul ascii al tastei care a fost apasata)
; arg3 - y
draw proc
	push ebp
	mov ebp, esp
	pusha
	
	; mov eax, [ebp+arg1]
	; cmp eax, 1
	; jz evt_click
	; cmp eax, 2 
	; mai jos e codul care intializeaza fereastra cu pixeli albi
	; mov eax, area_width
	; mov ebx, area_height
	; mul ebx
	; shl eax, 2
	; push eax
	; push 000
	; push area
	; call memset
	; add esp, 12
	; jmp afisare_litere
	
evt_click:
	; mov eax, [ebp+arg3] ;EAX=y
	; mov ebx, area_width
	; mul ebx ;EAX=y*area_width
	; add eax,[ebp+arg2] 
	; shl eax,2 ;pozitia in vectorul
	; add eax, area
	; mov dword ptr[eax], 0FF1122h
	; mov dword ptr[eax+4], 0FF1122h
	; mov dword ptr[eax-4], 0FF1122h
	; mov dword ptr[eax+4*area_width], 0FF1122h
	; mov dword ptr[eax-4*area_width], 0FF1122h
	mov eax,[ebp+arg2]
	cmp eax,button_x
	jl evt_click0
	cmp eax, button_x + table_size_o
	jg evt_click0
	mov eax,[ebp+arg3]
	cmp eax,button_y
	jl evt_click0
	cmp eax, button_y + table_size_v
	jg evt_click0
		
	evt_click0:
	
	
	
	mov eax,[ebp+arg2]
	cmp eax, 150
	jl evt_click45
	cmp eax, 150 + button_x1
	jg evt_click45
	mov eax,[ebp+arg3]
	cmp eax,610
	jl evt_click45
	cmp eax, 610 + button_y1
	jg evt_click45
	mov ecx,10
	
loop_grad_zero:	dm_0 coordXminge, coordYminge

loop loop_grad_zero

evt_click45:
	
	mov eax,[ebp+arg2]
	cmp eax, 240
	jl evt_click90
	cmp eax, 240 + button_x1
	jg evt_click90
	mov eax,[ebp+arg3]
	cmp eax,610
	jl evt_click90
	cmp eax, 610 + button_y1
	jg evt_click90
	dm_45 coordXminge, coordYminge


	
	evt_click90:
	mov eax,[ebp+arg2]
	cmp eax, 330
	jl evt_click135
	cmp eax, 330 + button_x1
	jg evt_click135
	mov eax,[ebp+arg3]
	cmp eax,610
	jl evt_click135
	cmp eax, 610 + button_y1
	jg evt_click135
	dm_90 coordXminge, coordYminge

	
	evt_click135:
	mov eax,[ebp+arg2]
	cmp eax, 420
	jl evt_click180
	cmp eax, 420 + button_x1
	jg evt_click180
	mov eax,[ebp+arg3]
	cmp eax,610
	jl evt_click180
	cmp eax, 610 + button_y1
	jg evt_click180
	dm_135 coordXminge, coordYminge
	
	evt_click180:
	mov eax,[ebp+arg2]
	cmp eax, 509
	jl evt_click225
	cmp eax, 509 + button_x1
	jg evt_click225
	mov eax,[ebp+arg3]
	cmp eax,610
	jl evt_click225
	cmp eax, 610 + button_y1
	jg evt_click225
	dm_180 coordXminge, coordYminge
	
	evt_click225:
	mov eax,[ebp+arg2]
	cmp eax, 600
	jl evt_click270
	cmp eax, 600 + button_x1
	jg evt_click270
	mov eax,[ebp+arg3]
	cmp eax,610
	jl evt_click270
	cmp eax, 610 + button_y1
	jg evt_click270
	dm_225 coordXminge, coordYminge
	
	evt_click270:
	mov eax,[ebp+arg2]
	cmp eax, 688
	jl evt_click315
	cmp eax, 688 + button_x1
	jg evt_click315
	mov eax,[ebp+arg3]
	cmp eax,610
	jl evt_click315
	cmp eax, 610 + button_y1
	jg evt_click315
	dm_270 coordXminge, coordYminge
	
	
	evt_click315:
	mov eax,[ebp+arg2]
	cmp eax, 778
	jl button_fail
	cmp eax, 778 + button_x1
	jg button_fail
	mov eax,[ebp+arg3]
	cmp eax,610
	jl button_fail
	cmp eax, 610 + button_y1
	jg button_fail
	dm_315 coordXminge, coordYminge
	
button_fail:
	jmp afisare_litere
	

	
afisare_litere:
	;afisam valoarea counter-ului curent (sute, zeci si unitati)
	;mov ebx, 10
	;mov1 eax, counter
	;cifra unitatilor
	;mov edx, 0
	;div ebx
	;add edx, '0'
	;make_text_macro edx, area, 30, 10
	;cifra zecilor
	;mov edx, 0
	;div ebx
	;add edx, '0'
	;make_text_macro edx, area, 20, 10
	;cifra sutelor
	;mov edx, 0
	;div ebx
	;add edx, '0'
	;make_text_macro edx, area, 10, 10
	
	;scriem un mesaj
	make_text_macro2 'B', area, 145, 150
	make_text_macro3 ' ', area, 155, 150
	make_text_macro2 'I', area, 165, 150
	make_text_macro3 ' ', area, 175, 150
	make_text_macro2 'L', area, 185, 150
	make_text_macro3 ' ', area, 195, 150
	make_text_macro2 'I', area, 205, 150
	make_text_macro3 ' ', area, 215, 150
	make_text_macro2 'A', area, 225, 150
	make_text_macro3 ' ', area, 235, 150
	make_text_macro2 'R', area, 245, 150
	make_text_macro3 ' ', area, 255, 150
	make_text_macro2 'D', area, 265, 150

	
	
	line_horizontal button_x, 	button_y, 	table_size_o, 	044D62Ch
	line_horizontal button_x, 	button_y+1, 	table_size_o, 	086ED26h
	line_horizontal button_x, 	button_y+2, 	table_size_o,	044D62Ch
		
	line_horizontal button_x, button_y + table_size_v, 		table_size_o, 044D62Ch
	line_horizontal button_x, button_y + table_size_v-1, 	table_size_o, 086ED26h
	line_horizontal button_x, button_y + table_size_v-2, 	table_size_o, 044D62Ch
	
	line_vertical button_x,		button_y, 	table_size_v, 	044D62Ch
	line_vertical button_x+1, 	button_y, 	table_size_v-1, 086ED26h
	line_vertical button_x+2, 	button_y+2, table_size_v-2, 044D62Ch
	
	line_vertical button_x + table_size_o, 	button_y, 	table_size_v, 	044D62Ch
	line_vertical button_x + table_size_o-1, 	button_y+1, table_size_v-1, 086ED26h
	line_vertical button_x + table_size_o-2, 	button_y+2, table_size_v-2, 044D62Ch
	
	;make_mingee  area, 300, 450
	
	;buton de 0 grade
	line_horizontal		150, 				610,					button_x1, 		0ff8c00h
	line_horizontal		152, 				612,					button_x1-4,	0ff8c00h
	line_horizontal 	150, 				610 + button_y1, 		button_x1, 		0ff8c00h
	line_horizontal 	152, 				610 + button_y1 - 2, 	button_x1-4, 	0ff8c00h
	line_vertical 		150, 				610,					button_y1, 		0ff8c00h
	line_vertical 		150 + button_x1, 	610,					button_y1, 		0ff8c00h
	
	make_text_macro2 '0', area, 185, 625

	
	;buton de 45 grade
	line_horizontal		240, 				610,					button_x1, 		0fdee00h
	line_horizontal 	240, 				610 + button_y1, 		button_x1, 		0fdee00h
	line_horizontal 	242, 				610 + button_y1 - 2, 	button_x1-4, 	0fdee00h
	line_vertical 		240, 				610,					button_y1, 		0fdee00h
	line_vertical 		240 + button_x1, 	610,					button_y1, 		0fdee00h
	line_horizontal		242, 				612,					button_x1-4,	0fdee00h
	
	make_text_macro3 '4', area, 270, 625
	make_text_macro3 '5', area, 280, 625
	
	
	;buton de 90 grade
	line_horizontal		330, 				610,					button_x1, 		0ccff00h
	line_horizontal 	330, 				610 + button_y1, 		button_x1, 		0ccff00h
	line_vertical 		330, 				610,					button_y1, 		0ccff00h
	line_vertical 		330 + button_x1, 	610,					button_y1, 		0ccff00h
	line_horizontal		332, 				612,					button_x1-4,	0ccff00h
	line_horizontal 	332, 				610 + button_y1 - 2, 	button_x1-4, 	0ccff00h
	
	make_text_macro4 '9', area, 360, 625
	make_text_macro4 '0', area, 370, 625
	
	;buton de 135 grade
	line_horizontal		420, 				610,					button_x1, 		087cefah
	line_horizontal 	420, 				610 + button_y1, 		button_x1, 		087cefah
	line_vertical 		420, 				610,					button_y1, 		087cefah
	line_vertical 		420 + button_x1, 	610,					button_y1, 		087cefah
	line_horizontal		422, 				612,					button_x1-4,	087cefah
	line_horizontal 	422, 				610 + button_y1 - 2, 	button_x1-4, 	087cefah
	
	make_text_macro5 '1', area, 445, 625
	make_text_macro5 '3', area, 455, 625
	make_text_macro5 '5', area, 465, 625
	
	;buton de 180 grade
	line_horizontal		510, 				610,					button_x1, 		087cefah
	line_horizontal 	510, 				610 + button_y1, 		button_x1, 		087cefah
	line_vertical 		510, 				610,					button_y1, 		087cefah
	line_vertical 		510 + button_x1, 	610,					button_y1, 		087cefah
	line_horizontal		512, 				612,					button_x1-4,	087cefah
	line_horizontal 	512, 				610 + button_y1 - 2, 	button_x1-4, 	087cefah
	
	make_text_macro5 '1', area, 535, 625
	make_text_macro5 '8', area, 545, 625
	make_text_macro5 '0', area, 555, 625
	
	;buton de 225 grade
	line_horizontal		600, 				610,					button_x1, 		0ccff00h
	line_horizontal 	600, 				610 + button_y1, 		button_x1, 		0ccff00h
	line_vertical 		600, 				610,					button_y1, 		0ccff00h
	line_vertical 		600 + button_x1, 	610,					button_y1, 		0ccff00h
	line_horizontal		602, 				612,					button_x1-4,	0ccff00h
	line_horizontal 	602, 				610 + button_y1 - 2, 	button_x1-4, 	0ccff00h
	
	make_text_macro4 '2', area, 622, 625
	make_text_macro4 '2', area, 632, 625
	make_text_macro4 '5', area, 642, 625
	
	;buton de 270 grade
	line_horizontal		690, 				610,					button_x1, 		0fdee00h
	line_horizontal 	690, 				610 + button_y1, 		button_x1, 		0fdee00h
	line_horizontal 	692, 				610 + button_y1 - 2, 	button_x1-4, 	0fdee00h
	line_vertical 		690, 				610,					button_y1, 		0fdee00h
	line_vertical 		690 + button_x1, 	610,					button_y1, 		0fdee00h
	line_horizontal		692, 				612,					button_x1-4,	0fdee00h
	
	make_text_macro3 '2', area, 713, 625
	make_text_macro3 '7', area, 723, 625
	make_text_macro3 '0', area, 733, 625
	
	;buton de 315 grade
	line_horizontal		780, 				610,					button_x1, 		0ff8c00h
	line_horizontal		782, 				612,					button_x1-4,	0ff8c00h
	line_horizontal 	780, 				610 + button_y1, 		button_x1, 		0ff8c00h
	line_horizontal 	782, 				610 + button_y1 - 2, 	button_x1-4, 	0ff8c00h
	line_vertical 		780, 				610,					button_y1, 		0ff8c00h
	line_vertical 		780 + button_x1, 	610,					button_y1, 		0ff8c00h
	
	make_text_macro2 '3', area, 800, 625
	make_text_macro2 '1', area, 810, 625
	make_text_macro2 '5', area, 820, 625
	
	
	;minge
	; make_text_macro3 'O', area, coordXminge, coordYminge
	
	
	
	
	
	; nouazeci:

	; cmp coordYminge, table_size_o
	; je sf_macro
	
	; line_horizontal		coordXminge, 				coordYminge,					mingel,	 		0ff8c00h
	; add coordYminge, 15
	; line_horizontal		coordXminge, 				coordYminge+2,					mingel, 		0ff8c00h
	; sub coordYminge, 15
	
	
	
	mov edx, 0
	mov ecx, 9
	mov edx, 250
	; pusha
	; push offset	vertical
	; call puts
	;add esp, 4
	;popa

final_draw:
	popa
	mov esp, ebp
	pop ebp
	ret
draw endp

start:
	;alocam memorie pentru zona de desenat
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2 ;fiecare pixel ocupa un doubleword
	push eax
	call malloc
	add esp, 4
	mov area, eax
	;apelam functia de desenare a ferestrei
	; typedef void (*DrawFunc)(int evt, int x, int y);
	; void __cdecl BeginDrawing(const char *title, int width, int height, unsigned int *area, DrawFunc draw);
	push offset draw ;procedura care deseneaza si reactioneaza la evenimente
	push area
	push area_height
	push area_width
	push offset window_title
	call BeginDrawing
	add esp, 20
	call BeginDrawing
	;terminarea programului
	push 0
	call exit
end start