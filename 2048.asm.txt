.386
.model flat, stdcall
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;includem biblioteci, si declaram ce functii vrem sa importam
includelib msvcrt.lib
extern exit: proc
extern malloc: proc
extern memset: proc

includelib canvas.lib
extern BeginDrawing: proc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;declaram simbolul start ca public - de acolo incepe executia
public start
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;sectiunile programului, date, respectiv cod
.data
;aici declaram date
window_title DB "2048",0
area_width EQU 640
area_height EQU 480
area DD 0

counter DD 0 ; numara evenimentele de tip timer

arg1 EQU 8
arg2 EQU 12
arg3 EQU 16
arg4 EQU 20

symbol_width EQU 10
symbol_height EQU 20
include digits.inc
include letters.inc

button_x EQU 350
button_y EQU 75
button_size EQU 240

button_x1 EQU  150
button_y1 EQU  185
button_size1 EQU 40

seed        dd          2314
max			dd			16
dat         dd          0
score        dd         0
randData    dd          0
changedW dd 1 
changedS dd 0 
changedA dd 1
changedD dd 1 

gameIsEnd dd    0
gameIsWin dd 0
gameContinue dd 0
tmpMat dd 16 DUP(?)



static db 'static',0
edit db 'edit',0


Mat   dd 0,0,0,0
      dd 0,0,0,0
	  dd 0,0,0,0
	  dd 0,0,0,0


Mat2  dd 0,0,0,0
	  dd 0,0,0,0
	  dd 0,0,0,0
	  dd 0,0,0,0
overEdge dd ? 
exchangeNum dd ? 

row dd 1
col dd 1  
 
.code
; procedura make_text afiseaza o litera sau o cifra la coordonatele date
; arg1 - simbolul de afisat (litera sau cifra)
; arg2 - pointer la vectorul de pixeli
; arg3 - pos_x
; arg4 - pos_y
make_text proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0FFFFFFh
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text endp

make_text2 proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0ff8c00h
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text2 endp

; un macro ca sa apelam mai usor desenarea simbolului
make_text_macro macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text
	add esp, 16
endm

make_text_macro2 macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text2
	add esp, 16
endm

line_horizontal macro x, y, len, color
local bucla_line
   mov eax, y; eax=y
   mov ebx, area_width
   mul ebx; eax=y*area_width
   add eax, x; eax=y*area_width+x
   shl eax, 2 ;eax=(y*area_width+x) * 4
   add eax, area 
   mov ecx, len
bucla_line:
     mov dword ptr[eax], color
	 add eax, 4
	 loop bucla_line
endm

line_vertical macro x, y, len, color
local bucla_line
   mov eax, y; eax=y
   mov ebx, area_width
   mul ebx; eax=y*area_width
   add eax, x; eax=y*area_width+x
   shl eax, 2 ;eax=(y*area_width+x) * 4
   add eax, area 
   mov ecx, len
bucla_line:
     mov dword ptr[eax], color
	 add eax, area_width * 4
	 loop bucla_line
endm

; functia de desenare - se apeleaza la fiecare click
; sau la fiecare interval de 200ms in care nu s-a dat click
; arg1 - evt (0 - initializare, 1 - click, 2 - s-a scurs intervalul fara click)
; arg2 - x
; arg3 - y
; tiparire_canvas macro Mat
; local fail_elem1, fail_elem2, fail_elem3, fail_elem4, fail_elem5, fail_elem6, fail_elem7, fail_elem8, fail_elem9, fail_elem10, fail_elem11, fail_elem12, fail_elem13, fail_elem14, fail_elem15, fail_elem16, ett
; mov ecx, 0

; mov edx, Mat[0]
; make_text_macro ' ', area, 380, 105
; cmp edx, ecx
; je fail_elem1
; add edx, '0'
; make_text_macro ebx, area, 380, 105

; make_text_macro edx, area, 375, 110
; fail_elem1:

; mov edx, Mat[4]
; make_text_macro ' ', area, 350, 230
; cmp edx, ecx
; je fail_elem2
; add edx, '0'
; make_text_macro edx, area, 350, 230
; fail_elem2:

; mov edx, Mat[8]
; make_text_macro ' ', area, 450, 230
; cmp edx, ecx
; je fail_elem3
; add edx, '0'
; make_text_macro edx, area, 450, 230
; fail_elem3:

; mov edx ,Mat[12]
; make_text_macro ' ', area, 550, 230
; cmp edx, ecx
; je fail_elem4
; add edx, '0'
; make_text_macro edx, area, 550, 230
; fail_elem4:

; mov edx, Mat[16]
; make_text_macro ' ', area, 250, 330
; cmp edx, ecx
; je fail_elem5
; add edx, '0'
; make_text_macro edx, area, 250, 330
; fail_elem5:

; mov edx, Mat[20] ;2
; make_text_macro ' ', area, 350, 330
; cmp edx, ecx
; je fail_elem6
; add edx, '0'
; make_text_macro edx, area, 350, 330
; fail_elem6:

; mov edx, Mat[24]
; make_text_macro ' ', area, 450, 330
; cmp edx, ecx
; je fail_elem7
; add edx, '0'
; make_text_macro edx, area, 450, 330
; fail_elem7:

; mov edx, Mat[28]
; make_text_macro ' ', area, 550, 330
; cmp edx, ecx
; je fail_elem8
; add edx, '0'
; make_text_macro edx, area, 550, 330
; fail_elem8:

; mov edx, Mat[32]
; make_text_macro ' ', area, 250, 430
; cmp edx, ecx
; je fail_elem9
; add edx, '0'
; make_text_macro edx, area, 250, 430
; fail_elem9:

; mov edx, Mat[36]
; make_text_macro ' ', area, 350, 430
; cmp edx, ecx
; je fail_elem10
; add edx, '0'
; make_text_macro edx, area, 350, 430
; fail_elem10:

; mov edx, Mat[40]
; make_text_macro ' ', area, 450, 430
; cmp edx, ecx
; je fail_elem11
; add edx, '0'
; make_text_macro edx, area, 450, 430
; fail_elem11:

; mov edx, Mat[44]
; make_text_macro ' ', area, 550, 430
; cmp edx, ecx
; je fail_elem12
; add edx, '0'
; make_text_macro edx, area, 550, 430
; fail_elem12:

; mov edx, Mat[48]
; make_text_macro ' ', area, 250, 530
; cmp edx, ecx
; je fail_elem13
; add edx, '0'
; make_text_macro edx, area, 250, 530
; fail_elem13:
; mov edx, Mat[52]
; make_text_macro ' ', area, 350, 530
; cmp edx, ecx
; je fail_elem14
; add edx, '0'
; make_text_macro edx, area, 350, 530
; fail_elem14:

; mov edx, Mat[56]
; make_text_macro ' ', area, 450, 530
; cmp edx, ecx
; je fail_elem15
; add edx, '0'
; make_text_macro edx, area, 450, 530
; fail_elem15:

; mov edx, Mat[60]
; make_text_macro ' ', area, 550, 530
; cmp edx, ecx
; je fail_elem16
; add edx, '0'
; make_text_macro edx, area, 550, 530
; fail_elem16:
; endm

 random32       proc    random_seed:DWORD,max_val:DWORD 
                push ecx				
                push edx
                call       counter
                mov        ecx,random_seed
                add        eax,ecx		
                rol        ecx,1
                add        ecx,666h 
                mov        random_seed,ecx	
                mov     ecx,32
    crc_bit:    shr        eax,1			
                jnc        loop_crc_bit 
                xor        eax,0edb88320h
    loop_crc_bit:
                loop        crc_bit
                mov         ecx,max_val
                xor         edx,edx 
                div         ecx
                xchg        edx,eax 
                or          eax,eax
				mov			randData,eax	
                cmp     Mat[eax*4],0
                je      inital_mat
                mov     ecx,16
                mov     randData,eax
                xor     eax,eax     
                xor     edx,edx     

    get_emp:    
                cmp     Mat[edx*4],0
                jne      cmp_ne      
                mov     tmpMat[eax*4],edx
                inc     eax
    cmp_ne:         
                inc     edx
                loop    get_emp
                mov     ecx,eax
                xor     edx,edx
                mov     eax,randData
                div     ecx
                xchg    edx,eax 
                mov     edx,tmpMat[eax*4]
                mov     randData,edx
    inital_mat:
                mov     eax,randData
                mov    Mat[eax*4],2
                pop edx
                pop ecx
                ret        
    random32    Endp

getscore       proc
            push    ecx
            push    edx

            mov     ecx,0
            xor     eax,eax
			mov     score,0
			
 cul_score:
            mov     edx,Mat[ecx*4]
            mov     eax,score
            .if     edx==0
            .elseif     edx==2
                
            .elseif     edx==4
                add     eax,4
            .elseif     edx==8
                add     eax,16
            .elseif     edx==16
                add     eax,48
            .elseif     edx==32
                add     eax,128
            .elseif     edx==64
                add     eax,320
            .elseif     edx==128
                add     eax,768
            .elseif     edx==256
                add     eax,1792
            .elseif     edx==512
                add     eax,4096
            .elseif     edx==1024
                add     eax,9216
            .elseif     edx==2048
                add     eax,20480
            .else
                add eax,45036
            .endif
            mov     score,eax
            inc     ecx
            cmp     ecx,16
            jb    cul_score
			
			.if score >= 20480
				mov gameIsWin,1
			.endif
            pop     edx
            pop     ecx
            ret
getscore        Endp

moveW proc 
	MOV changedW,0
	mov ecx,4
	mov col,ecx
	mov row,1
w:	
	mov col,ecx
	mov row,1
	jmp w_trav
w_end:
	loop w
	ret
w_trav:
	imul eax,row,4
	add eax,col
	sub eax,5
	mov edx,Mat[eax*4]
	mov ebx,eax
	cmp row,1
	je w_merge
	cmp row,2
	je w_fore
	cmp row,3
	je w_fore
	cmp row,4
	je w_fore
	jmp w_trav
w_mov:
	inc row
	cmp row,5
	jb w_trav
	jmp w_end
w_merge:
	cmp edx,0
	je w_mov
	add ebx,4
	cmp ebx,16
	jae w_mov
	cmp eax,ebx
	je w_merge
	cmp Mat[ebx*4],0
	je w_merge
	cmp Mat[ebx*4],edx
	je w_equ
	jmp w_mov
w_equ:
	imul edx,2
	mov Mat[eax*4],edx
	mov Mat[ebx*4],0
    mov exchangeNum,edx
	mov edx,1
	mov changedW,edx
	mov edx,exchangeNum
	jmp w_mov
w_fore:
	cmp edx,0
	je w_mov
	mov ebx,eax
	sub ebx,4
	cmp Mat[ebx*4],0
	je w_zero
	jmp w_merge
w_zero:
	mov Mat[ebx*4],edx
	mov Mat[eax*4],0
    mov exchangeNum,edx
	mov edx,1
	mov changedW,edx
	mov edx,exchangeNum
	mov eax,ebx
	sub ebx,4
	cmp ebx,4000
	ja w_merge
	cmp Mat[ebx*4],0
	je w_zero
	jmp w_merge
moveW endp

moveD proc 
	mov changedD,0
	mov ecx,4
	mov col,ecx
	mov row,4
d:
	mov row,ecx
	mov col,4
	jmp d_trav
d_end:
	loop d
	ret
d_trav:
	imul eax,row,4
	add eax,col
	sub eax,5
	mov edx,Mat[eax*4]
	mov ebx,eax
	cmp col,4
	je d_merge
	cmp col,3
	je d_fore
	cmp col,2
	je d_fore
	cmp col,1
	je d_fore
	jmp d_trav
d_mov:
	dec col
	cmp col,0
	ja d_trav
	jmp d_end
d_merge:
	cmp edx,0
	je d_mov
	dec ebx
	mov overEdge,eax
	mov eax,row
	dec eax
	imul eax,4
	dec eax
	cmp eax,ebx
	je d_mov
	mov eax,overEdge
	cmp eax,ebx
	je d_merge
	cmp Mat[ebx*4],0
	je d_merge
	cmp Mat[ebx*4],edx
	je d_equ
	jmp d_mov
d_equ:
	imul edx,2
	mov Mat[eax*4],edx
	mov Mat[ebx*4],0
    mov exchangeNum,edx
	mov edx,1
	mov changedD,edx
	mov edx,exchangeNum
	jmp d_mov
d_fore:
	cmp edx,0
	je d_mov
	mov ebx,eax
	inc ebx
	cmp Mat[ebx*4],0
	je d_zero
	jmp d_merge
d_zero:
	mov Mat[ebx*4],edx
	mov Mat[eax*4],0
    mov exchangeNum,edx
	mov edx,1
	mov changedD,edx
	mov edx,exchangeNum
	mov eax,ebx
	inc ebx
	mov overEdge,ebx
	mov ebx,row
	imul ebx,4
	cmp overEdge,ebx
	je d_merge
	mov ebx,overEdge
	cmp Mat[ebx*4],0
	je d_zero
	jmp d_merge
moveD endp

moveA proc 
	mov changedA,0
	mov ecx,4
	mov row,ecx
	mov col,1
a:
	mov row,ecx
	mov col,1
	jmp a_trav
a_end:
	loop a
	ret
a_trav:
	imul eax,row,4
	add eax,col
	sub eax,5
	mov edx,Mat[eax*4]
	mov ebx,eax
	cmp col,1
	je a_merge
	cmp col,2
	je a_fore
	cmp col,3
	je a_fore
	cmp col,4
	je a_fore
	jmp a_trav
a_mov:
	inc col
	cmp col,5
	jb a_trav
	jmp a_end
a_merge:
	cmp edx,0
	je a_mov
	inc ebx
	mov overEdge,eax
	mov eax,row
	imul eax,4
	cmp eax,ebx
	je a_mov
	mov eax,overEdge
	cmp eax,ebx
	je a_merge
	cmp Mat[ebx*4],0
	je a_merge
	cmp Mat[ebx*4],edx
	je a_equ
	jmp a_mov
a_equ:
	
	imul edx,2
	mov Mat[eax*4],edx
	mov Mat[ebx*4],0
    mov exchangeNum,edx
	mov edx,1
	mov changedA,edx
	mov edx,exchangeNum
	jmp a_mov
a_fore:
	cmp edx,0
	je a_mov
	mov ebx,eax
	dec ebx
	cmp Mat[ebx*4],0
	je a_zero
	jmp a_merge
a_zero:
	mov Mat[ebx*4],edx
	mov Mat[eax*4],0
	mov exchangeNum,edx
	mov edx,1
	mov changedA,edx
	mov edx,exchangeNum
	mov eax,ebx
	dec ebx
	mov overEdge,ebx
	mov ebx,row
	dec ebx
	imul ebx,4
	dec ebx
	cmp overEdge,ebx
	je a_merge
	mov ebx,overEdge
	cmp Mat[ebx*4],0
	je a_zero
	jmp a_merge
moveA endp

moveS proc 
	mov changedS,0
	mov ecx,4
	mov row,ecx
	mov col,4
s:
	mov col,ecx
	mov row,4
	jmp s_trav
s_end:
	loop s
	ret
s_trav:
	imul eax,row,4
	add eax,col
	sub eax,5
	mov edx,Mat[eax*4]
	mov ebx,eax
	cmp row,4
	je s_merge
	cmp row,3
	je s_fore
	cmp row,2
	je s_fore
	cmp row,1
	je s_fore
	jmp s_trav
s_mov:
	dec row
	cmp row,0
	ja s_trav
	jmp s_end

s_merge:
	cmp edx,0
	je s_mov
	sub ebx,4
	cmp ebx,400
	jae s_mov
	cmp eax,ebx
	je s_merge
	cmp Mat[ebx*4],0
	je s_merge
	cmp Mat[ebx*4],edx
	je s_equ
	jmp s_mov
s_equ:
	imul edx,2
	mov Mat[eax*4],edx
	mov Mat[ebx*4],0
    mov exchangeNum,edx
	mov edx,1
	mov changedS,edx
	mov edx,exchangeNum
	jmp s_mov
s_fore:
	cmp edx,0
	je s_mov
	mov ebx,eax
	add ebx,4
	cmp Mat[ebx*4],0
	je s_zero
	jmp s_merge
s_zero:
	mov Mat[ebx*4],edx
	mov Mat[eax*4],0
    mov exchangeNum,edx
	mov edx,1
	mov changedS,edx
	mov edx,exchangeNum
	mov eax,ebx
	add ebx,4
	cmp ebx,16 
	jae s_merge
	cmp Mat[ebx*4],0
	je s_zero
	jmp s_merge
moveS endp

gameEnd proc
    push    ecx
    push    edx
	mov ecx,16
	mov esi,0
L1:
	push Mat[esi*4]
	pop Mat2[esi*4]
	inc esi
	loop L1
	invoke moveW
	mov ecx,16
	mov esi,0
L2:
	push Mat2[esi*4]
	pop Mat[esi*4]
	inc esi
	loop L2
	invoke moveA
	mov ecx,16
	mov esi,0
L3:
	push Mat[esi*4]
	pop Mat[esi*4]
	inc esi
	loop L3
	invoke moveS
	mov ecx,16
	mov esi,0
L4:
	push Mat2[esi*4]
	pop Mat[esi*4]
	inc esi
	loop L4
	invoke moveD

	mov ecx,16
	mov esi,0
L5:
	push Mat2[esi*4]
	pop Mat[esi*4]
	inc esi
	loop L5
	xor eax,eax
    mov eax,changedW
    add eax,changedS
    add eax,changedA
	add eax,changedD
    cmp eax,0
    jne end_node
    mov eax,1
    mov gameIsEnd,eax
end_node:
    pop edx
    pop ecx
    ret
gameEnd Endp

ReStartGame proc far C uses eax esi ecx edx
	mov ecx,16
	mov esi,0
L1:
	mov Mat[esi*4],0
	inc esi
	loop L1

	mov gameIsEnd,0
	mov gameIsWin,0
	mov gameContinue,0
	mov score,0

	INVOKE random32,dat,max
	INVOKE random32,dat,max
	ret
ReStartGame endp

draw proc
	push ebp
	mov ebp, esp
	pusha
	mov eax, [ebp+arg1]
	cmp eax, 1
	jz evt_click
	cmp eax, 2
	jz evt_timer ; nu s-a efectuat click pe nimic
	;mai jos e codul care intializeaza fereastra cu pixeli albi
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2
	push eax
	push 255
	push area
	call memset
	add esp, 12
	jmp afisare_litere
	
evt_click:
	mov eax,[ebp+arg2]
	cmp eax,button_x
	jl evt_clickW
	cmp eax, button_x + button_size1
	jg evt_clickW
	mov eax,[ebp+arg3]
	cmp eax,button_y
	jl evt_clickW
	cmp eax, button_y + button_size1
	jg evt_clickW
	
 evt_clickW:
	mov eax,[ebp+arg2]
	cmp eax, 150
	jl evt_clickA
	cmp eax, 150 + button_size1
	jg evt_clickA
	mov eax,[ebp+arg3]
	cmp eax,185
	jl evt_clickA
	cmp eax, 185 + button_size1
	jg evt_clickA
	call moveW

evt_clickA:
	mov eax,[ebp+arg2]
	cmp eax, 110
	jl evt_clickS
	cmp eax, 110 + button_size1
	jg evt_clickS
	mov eax,[ebp+arg3]
	cmp eax,225
	jl evt_clickS
	cmp eax, 225 + button_size1
	jg evt_clickS
	call moveA
   
evt_clickS:
	mov eax,[ebp+arg2]
	cmp eax, 150
	jl evt_clickD
	cmp eax, 150 + button_size1
	jg evt_clickD
	mov eax,[ebp+arg3]
	cmp eax,225
	jl evt_clickD
	cmp eax, 225 + button_size1
	jg evt_clickD
	call moveS

evt_clickD:
	mov eax,[ebp+arg2]
	cmp eax, 190
	jl button_fail
	cmp eax, 190 + button_size1
	jg button_fail
	mov eax,[ebp+arg3]
	cmp eax,225
	jl button_fail
	cmp eax, 225 + button_size1
	jg button_fail
	call moveD

button_fail:
	jmp afisare_litere
	
evt_timer:
	inc counter

afisare_litere:
	;afisam valoarea counter-ului curent (sute, zeci si unitati)
	mov ebx, 10
	mov eax, counter
	;cifra unitatilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 30, 10
	;cifra zecilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 20, 10
	;cifra sutelor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 10, 10
	
	;scriem un mesaj
	make_text_macro '2', area, 110, 100
	make_text_macro '0', area, 120, 100
	make_text_macro '4', area, 130, 100
	make_text_macro '8', area, 140, 100
	make_text_macro ' ', area, 150, 100
	make_text_macro 'G', area, 160, 100
	make_text_macro 'A', area, 170, 100
	make_text_macro 'M', area, 180, 100
	make_text_macro 'E', area, 190, 100
	
    line_horizontal button_x, button_y, button_size, 0ff8c00h
	line_horizontal button_x, button_y + button_size, button_size, 0ff8c00h
	line_vertical button_x, button_y, button_size, 0ff8c00h
	line_vertical button_x + button_size, button_y, button_size, 0ff8c00h
	
	line_horizontal button_x, button_y+60, button_size, 0ff8c00h
	line_horizontal button_x, button_y+120, button_size, 0ff8c00h
	line_horizontal button_x, button_y+180, button_size, 0ff8c00h
	line_vertical button_x+60, button_y, button_size, 0ff8c00h
	line_vertical button_x+120, button_y, button_size, 0ff8c00h
	line_vertical button_x+180, button_y, button_size, 0ff8c00h
	
	;tasta w
	line_horizontal button_x1, button_y1, button_size1, 0
	line_horizontal button_x1, button_y1 + button_size1, button_size1, 0
	line_vertical button_x1, button_y1, button_size1, 0
	line_vertical button_x1 + button_size1, button_y1, button_size1, 0		
	make_text_macro2 'W', area, 165,195
	
	;tasta s
	line_horizontal button_x1, button_y1+40, button_size1, 0
	line_horizontal button_x1, button_y1 + button_size1+40, button_size1, 0
	line_vertical button_x1, button_y1+40, button_size1, 0
	line_vertical button_x1 + button_size1, button_y1+40, button_size1, 0		
	make_text_macro2 'S', area, 167,235
	
	;tasta a
	line_horizontal button_x1-40, button_y1+40, button_size1, 0
	line_horizontal button_x1-40, button_y1 + button_size1+40, button_size1, 0
	line_vertical button_x1-40, button_y1+40, button_size1, 0
	line_vertical button_x1 + button_size1-40, button_y1+40, button_size1, 0		
	make_text_macro2 'A', area, 125,235
	
	;tasta d
	line_horizontal button_x1+40, button_y1+40, button_size1, 0
	line_horizontal button_x1+40, button_y1 + button_size1+40, button_size1, 0
	line_vertical button_x1+40, button_y1+40, button_size1, 0
	line_vertical button_x1 + button_size1+40, button_y1+40, button_size1, 0		
	make_text_macro2 'D', area, 205,235
	
	;line_horizontal button_x, button_y+(button_size/2), button_size, 0
	;line_horizontal button_x, button_y+(button_size/4), button_size, 0
	;line_vertical button_x + (button_size)/2, button_y, button_size, 0
	;line_vertical button_x + (button_size)/4, button_y, button_size, 0
	;line_vertical button_x + (button_size)/, button_y, button_size, 0
final_draw:
	popa
	mov esp, ebp
	pop ebp
	ret
draw endp

start:
	;alocam memorie pentru zona de desenat
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2
	push eax
	call malloc
	add esp, 4
	mov area, eax
	;apelam functia de desenare a ferestrei
	; typedef void (*DrawFunc)(int evt, int x, int y);
	; void __cdecl BeginDrawing(const char *title, int width, int height, unsigned int *area, DrawFunc draw);
	push offset draw
	push area
	push area_height
	push area_width
	push offset window_title
	call BeginDrawing
	add esp, 20
	;terminarea programului
	push 0
	call exit
end start